geom_line(stat = 'summary', fun.y = mean)
library(gridExtra)
grid.arrange(p2, p1, p3, ncol = 1)
?diamonds
#1.price vs. x
library(ggplot2)     #must load the ggplot package first
data(diamonds)       #loads the diamonds data set since it comes with the ggplot package
summary(diamonds)
ggplot(aes(x = x, y = price), data = diamonds) +
geom_point()
with(diamonds, cor.test(price, x))
with(diamonds, cor.test(price, y))
with(diamonds, cor.test(price, z))
# Create a simple scatter plot of price vs depth.
ggplot(aes(x = depth, y = price), data = diamonds) +
geom_point()
# Change the code to make the transparency of the
# points to be 1/100 of what they are now and mark
# the x-axis every 2 units. See the instructor notes
# for two hints.
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(50, 75, 2))
with(diamonds, cor.test(price, depth))
# Create a scatterplot of price vs carat
# and omit the top 1% of price and carat
# values.
ggplot(aes(x = carat, y = price), data = subset(diamonds, price < (71*0.01)) +
geom_point()
# Create a scatterplot of price vs carat
# and omit the top 1% of price and carat
# values.
ggplot(aes(x = carat, y = price), data = subset(diamonds, price < (71*0.01))) +
geom_point()
summrise(diamonds.price)
summarise(diamonds.price)
summarise(diamonds$price)
summarise(diamonds)
summary(diamonds$price)
# Create a scatterplot of price vs carat
# and omit the top 1% of price and carat
# values.
ggplot(aes(x = carat, y = price), data = subset(diamonds, price < (18823*0.01))) +
geom_point()
# Create a scatterplot of price vs carat
# and omit the top 1% of price and carat
# values.
ggplot(aes(x = carat, y = price), data = subset(diamonds, price < (18823*0.99))) +
geom_point()
# Create a scatterplot of price vs carat
# and omit the top 1% of price and carat
# values.
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(colour = "orange") +
scale_x_continuous(limits = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(limits = c(0, quantile(diamonds$price, 0.99))) +
labs(title = "Diamond Price vs. Mass", x = "Mass (carats)", y = "Price (USD")
# Create a scatterplot of price vs. volume (x * y * z).
# This is a very rough approximation for a diamond's volume.
# Create a new variable for volume in the diamonds data frame.
# This will be useful in a later exercise.
diamonds$volume <- with(diamonds, x * y * z)
ggplot(diamonds, aes(volume, price)) + geom_point()
library(plyr)
library(plyr)
library(dplyr)
library(plyr)
library(dplyr)
#You can find out how many diamonds have 0 volume by using
count(diamonds$volume == 0)
#If you ran the count function from plyr, you need to run this command in R to unload the plyr package.
#The plyr package will conflict with the dplyr package in later exercises.
detach("package:plyr", unload=TRUE)
#What is the correlation of price and volume? Exclude diamonds that have a volume of 0 or that are greater than or equal to 800.
with(diamonds[diamonds$volume > 0 & diamonds$volume < 800, ], cor(volume, price))
# Subset the data to exclude diamonds with a volume
# greater than or equal to 800. Also, exclude diamonds
# with a volume of 0. Adjust the transparency of the
# points and add a linear model to the plot. (See the
# Instructor Notes or look up the documentation of
# geom_smooth() for more details about smoothers.)
ggplot(diamonds[diamonds$volume > 0 & diamonds$volume < 800], aes(x = volume, y = price)) +
geom_point(alpha = 1/100, colour = "orange") +
geom_smooth(method = "lm", colour = "blue") +
labs(title = "Price vs. Volume", x = "volume", y = "price(USD)")
# Subset the data to exclude diamonds with a volume
# greater than or equal to 800. Also, exclude diamonds
# with a volume of 0. Adjust the transparency of the
# points and add a linear model to the plot. (See the
# Instructor Notes or look up the documentation of
# geom_smooth() for more details about smoothers.)
ggplot(diamonds[diamonds$volume > 0 & diamonds$volume < 800,], aes(x = volume, y = price)) +
geom_point(alpha = 1/100, colour = "orange") +
geom_smooth(method = "lm", colour = "blue") +
labs(title = "Price vs. Volume", x = "volume", y = "price(USD)")
detach("package:plyr", unload=TRUE)
# Use the function dplyr package
# to create a new data frame containing
# info on diamonds by clarity.
# Name the data frame diamondsByClarity
# The data frame should contain the following
# variables in this order.
#       (1) mean_price
#       (2) median_price
#       (3) min_price
#       (4) max_price
#       (5) n
# where n is the number of diamonds in each
# level of clarity.
library(dplyr)
diamonds$diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
# Use the function dplyr package
# to create a new data frame containing
# info on diamonds by clarity.
# Name the data frame diamondsByClarity
# The data frame should contain the following
# variables in this order.
#       (1) mean_price
#       (2) median_price
#       (3) min_price
#       (4) max_price
#       (5) n
# where n is the number of diamonds in each
# level of clarity.
library(dplyr)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
# Use the function dplyr package
# to create a new data frame containing
# info on diamonds by clarity.
# Name the data frame diamondsByClarity
# The data frame should contain the following
# variables in this order.
#       (1) mean_price
#       (2) median_price
#       (3) min_price
#       (4) max_price
#       (5) n
# where n is the number of diamonds in each
# level of clarity.
library(dplyr)
diamondsByClarity <- diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
diamondsByClarity
diamondsByClarity <- summarise(group_by(diamonds, clarity),
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()
)
diamondsByClarity
# We’ve created summary data frames with the mean price
# by clarity and color. You can run the code in R to
# verify what data is in the variables diamonds_mp_by_clarity
# and diamonds_mp_by_color.
# Your task is to write additional code to create two bar plots
# on one output image using the grid.arrange() function from the package
# gridExtra.
p1 <- ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) + geom_bar(stat = "identity") +
labs(title = "Diamonds: Mean Price by Clarity", x = "Diamond Clarity", y = "Mean Price (USD)")
# We’ve created summary data frames with the mean price
# by clarity and color. You can run the code in R to
# verify what data is in the variables diamonds_mp_by_clarity
# and diamonds_mp_by_color.
# Your task is to write additional code to create two bar plots
# on one output image using the grid.arrange() function from the package
# gridExtra.
diamonds_mp_by_clarity <- diamondsByClarity
p1 <- ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) + geom_bar(stat = "identity") +
labs(title = "Diamonds: Mean Price by Clarity", x = "Diamond Clarity", y = "Mean Price (USD)")
p2 <- ggplot(diamonds_mp_by_color, aes(color, mean_price)) + geom_bar(stat = "identity") +
labs(title = "Diamonds: Mean Price by Color", x = "Diamond Color", y = "Mean Price (USD)")
# We’ve created summary data frames with the mean price
# by clarity and color. You can run the code in R to
# verify what data is in the variables diamonds_mp_by_clarity
# and diamonds_mp_by_color.
# Your task is to write additional code to create two bar plots
# on one output image using the grid.arrange() function from the package
# gridExtra.
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p1 <- ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) + geom_bar(stat = "identity") +
labs(title = "Diamonds: Mean Price by Clarity", x = "Diamond Clarity", y = "Mean Price (USD)")
p2 <- ggplot(diamonds_mp_by_color, aes(color, mean_price)) + geom_bar(stat = "identity") +
labs(title = "Diamonds: Mean Price by Color", x = "Diamond Color", y = "Mean Price (USD)")
grid.arrange(p1, p2)
# The Gapminder website contains over 500 data sets with information about
# the world's population. Your task is to continue the investigation you did at the
# end of Problem Set 3 or you can start fresh and choose a different
# data set from Gapminder.
# If you’re feeling adventurous or want to try some data munging see if you can
# find a data set or scrape one from the web.
# In your investigation, examine pairs of variable and create 2-5 plots that make
# use of the techniques from Lesson 4.
# You can find a link to the Gapminder website in the Instructor Notes.
# Once you've completed your investigation, create a post in the discussions that includes:
#       1. the variable(s) you investigated, your observations, and any summary statistics
#       2. snippets of code that created the plots
#       3. links to the images of your plots
# We’ve created summary data frames with the mean price
# by clarity and color. You can run the code in R to
# verify what data is in the variables diamonds_mp_by_clarity
# and diamonds_mp_by_color.
# Your task is to write additional code to create two bar plots
# on one output image using the grid.arrange() function from the package
# gridExtra.
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p1 <- ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) + geom_bar(stat = "identity") +
labs(title = "Diamonds: Mean Price by Clarity", x = "Diamond Clarity", y = "Mean Price (USD)")
p2 <- ggplot(diamonds_mp_by_color, aes(color, mean_price)) + geom_bar(stat = "identity") +
labs(title = "Diamonds: Mean Price by Color", x = "Diamond Color", y = "Mean Price (USD)")
grid.arrange(p1, p2)
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
install.packages("tidyr")
library(tidyr)
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
library(methods)
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
library(methods)
install.packages("Matrix", type = "source")
install.packages("Matrix", type = "source")
install.packages("tidyr")
library(tidyr)
library(methods)
install.packages("Matrix", type = "source")
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
#ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
# Remove 'X' from year values
#ocpc$Year <- substr(ocpc$Year, 2, length(ocpc$Year))
# Remove NA values
ocpc <- ocpc[complete.cases(ocpc), ]
# Change year to factor
ocpc$Year <- as.factor(ocpc$Year)
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
#ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
# Remove 'X' from year values
#ocpc$Year <- substr(ocpc$Year, 2, length(ocpc$Year))
# Remove NA values
ocpc <- ocpc[complete.cases(ocpc), ]
# Change year to factor
ocpc$Year <- as.factor(ocpc$Year)
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
#ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
# Remove 'X' from year values
#ocpc$Year <- substr(ocpc$Year, 2, length(ocpc$Year))
# Remove NA values
ocpc <- ocpc[complete.cases(ocpc), ]
# Change year to factor
#ocpc$Year <- as.factor(ocpc$Year)
# Examine data
head(ocpc)
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
length(ocpc)
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
length_ocpc <- length(ocpc)
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length_ocpc)  # Reshape data
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
length(ocpc)
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:length(ocpc))  # Reshape data
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
head(ocpc)
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:47)  # Reshape data
# Remove 'X' from year values
ocpc$Year <- substr(ocpc$Year, 2, length(ocpc$Year))
# Remove NA values
ocpc <- ocpc[complete.cases(ocpc), ]
# Change year to factor
ocpc$Year <- as.factor(ocpc$Year)
# Examine data
head(ocpc)
length(ocpc)
length(ocpc)
#Step One: Continued investigation of per-capita oil consumption
#Prepare Dataset
# Load Gapminder dataset: Oil Consumption per Capita
ocpc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/Oil Consumption per capita.csv")
head(ocpc)
length(ocpc)
# Fix name of country column
colnames(ocpc)[1] <- "Country"
# Change from wide format to long format
ocpc <- gather(ocpc, 'Year', 'Consumption', 2:47)  # Reshape data (47 columns)
# Remove 'X' from year values
ocpc$Year <- substr(ocpc$Year, 2, length(ocpc$Year))
# Remove NA values
ocpc <- ocpc[complete.cases(ocpc), ]
# Change year to factor
ocpc$Year <- as.factor(ocpc$Year)
# Examine data
head(ocpc)
#Examine changes in per capita oil consumption over time
#Because we are tracking per-capita oil consumption for several dozen countries, a bar chart #or line chart tracking each country individually would be nearly impossible to read or #comprehend. However, a boxplot might show aggregate trends in per-capita oil consumption over #time.
# Boxplot oil consumption by year
ggplot(ocpc, aes(Year, Consumption)) + geom_boxplot() + scale_x_discrete(breaks = seq(1965, 2010, 5))
library(ggplot2)
#Examine changes in per capita oil consumption over time
#Because we are tracking per-capita oil consumption for several dozen countries, a bar chart #or line chart tracking each country individually would be nearly impossible to read or #comprehend. However, a boxplot might show aggregate trends in per-capita oil consumption over #time.
# Boxplot oil consumption by year
ggplot(ocpc, aes(Year, Consumption)) + geom_boxplot() + scale_x_discrete(breaks = seq(1965, 2010, 5))
#Identify the outliers
#As it turns out, the outliers are the most interesting feature of our boxplot. Let’s identify the top five oil consumers at four different moments in our time series.
# Print a bar plot ranking per capita oil consumption for the top five countries
# at 15-year intervals between 1965-2010
for(y in seq(1965, 2010, 15)) {
# Create a new dataframe for the current year only
ocpc_y <- ocpc[ocpc$Year == as.character(y), ]    # Find the top five consumers
ocpc_y_top5 <- ocpc_y[order(-ocpc_y$Consumption), ][1:5, ]
# Print the bar plot
print(ggplot(ocpc_y_top5, aes(reorder(Country, Consumption), Consumption)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Country", y = "Oil consumption (tons/year/person)",
title = paste("Top 5 countries in per capita oil consumption,", as.character(y))) +
scale_y_continuous(limits = c(0, max(ocpc$Consumption)), breaks = 0:10)
)
# Cleanup
rm(ocpc_y)
rm(ocpc_y_top5)
}
#Add a second variable (per-capita income)
# Import the Gapminder dataset tracking Gross National Income (GNI) per capita in constant year-2000 US dollars
gnipc <- read.csv("C:/Files/Udacity/Data-Analysis/Notes/Exploratory Data Analysis (R)/R Basics/eda-course-materials/lesson4/indicatorGNIpercapitaconstant2000US.csv")
head(gnipc)
# Apply transformations previously made to the oil consumption data:
# Fix name of country column
colnames(gnipc)[1] <- "Country"
# Reshape data from wide format to long format
gnipc <- gather(gnipc, 'Year', 'Income', 2:52)
# Remove "X" from year values
gnipc$Year <- substr(gnipc$Year, 2, length(gnipc$Year))
# Remove NA values
gnipc <- gnipc[complete.cases(gnipc), ]
# Change year to factor
gnipc$Year <- as.factor(gnipc$Year)
# Examine data
head(gnipc)
summary(gnipc)
# Join GNI data with oil consumption data
black_gold <- inner_join(ocpc, gnipc)
library(dplyr)
# Join GNI data with oil consumption data
black_gold <- inner_join(ocpc, gnipc)
# Coerce 'Year' variable to factor
black_gold$Year <- as.factor(black_gold$Year)
# Examine data
head(black_gold)
summary(black_gold)
# Plot oil consumption vs. income in 1965 and 2010:
for(y in c(1965, 2010)) {
# Create a new dataframe for the current year only
bg_y <- black_gold[black_gold$Year == as.character(y), ]
# Print the scatterplot
print(ggplot(bg_y, aes(Income, Consumption)) + geom_point() +
labs(x="GNI per capita (2000 USD)", y = "Oil consumption per capita", title = paste("Oil Consumption vs. Income,", as.character(y))) +
scale_y_continuous(limits = c(0, max(ocpc$Consumption)), breaks = 0:10)
)
# Cleanup
rm(bg_y)
}
# Find correlation between per capita income and per capita GNI in 1965 and 2010:
with(black_gold[black_gold$Year == "1965", ], cor(Income, Consumption))
with(black_gold[black_gold$Year == "2010", ], cor(Income, Consumption))
#Plot change in correlation over time
cor_by_year <- summarise(group_by(black_gold, Year), Correlation = cor(Income, Consumption))
ggplot(cor_by_year) + geom_line(aes(as.numeric(Year), Correlation)) +
scale_x_continuous(breaks = as.numeric(cor_by_year$Year), labels = ifelse((as.numeric(cor_by_year$Year) - 1) %% 5 == 0, as.character(cor_by_year$Year), "")) +
scale_y_continuous(breaks = seq(0, 1, 0.1)) +
labs(title = "Correlation between GNI and oil consumption (per capita)", x = "Year", y = "Correlation")
# install these if necessary
install.packages('GGally')  #particular plot
install.packages('scales')  #for a variety of things
install.packages('memisc')  #summarize the regression
install.packages('lattice') #few other things
install.packages('MASS')    #various functions
install.packages('car')     #recode variables
install.packages('reshape') #reshape and wrangle data
# install these if necessary
install.packages('GGally')  #particular plot
install.packages('scales')  #for a variety of things
install.packages('memisc')  #summarize the regression
install.packages('lattice') #few other things
install.packages('MASS')    #various functions
install.packages('car')     #recode variables
# install these if necessary
install.packages('GGally')  #particular plot
install.packages('scales')  #for a variety of things
install.packages('memisc')  #summarize the regression
install.packages('lattice') #few other things
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
